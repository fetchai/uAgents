name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  check-if-files-changed:
    runs-on: ubuntu-latest
    outputs:
      uagents: ${{ steps.files-changed.outputs.uagents }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: files-changed
        with:
          filters: |
            uagents:
              - 'python/**'
              - '.github/**'

  tests:
    name: Tests
    needs: check-if-files-changed

    defaults:
      run:
        shell: bash
        working-directory: ./python
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]
        include:
          - os: macos-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.12"
    runs-on: ${{ matrix.os }}

    steps:
      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        uses: actions/checkout@v4

      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - if: ${{
          needs.check-if-files-changed.outputs.uagents == 'true' &&
          steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          }}
        name: Install dependencies
        run: poetry install --no-interaction --no-root
      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        run: poetry install --no-interaction
      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        name: Run tests
        run: |
          source $VENV
          poetry run coverage run -m pytest
        env:
          COVERAGE_FILE: "${{ runner.temp }}/.coverage.${{ runner.os }}.${{ matrix.python-version }}"
      - if: ${{ needs.check-if-files-changed.outputs.uagents == 'true' }}
        name: Store coverage file
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ runner.os }}-${{ matrix.python-version }}
          path: ${{ runner.temp }}/.coverage.${{ runner.os }}.${{ matrix.python-version }}
          if-no-files-found: error
          include-hidden-files: true

  linting:
    name: Lint & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v1
        with:
          src: "python"
          args: "format --check"
          changed-files: "true"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        id: download
        with:
          pattern: coverage-*
          merge-multiple: true
          path: ./python

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_COVERAGE_FILES: true
          COVERAGE_PATH: ./python

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
